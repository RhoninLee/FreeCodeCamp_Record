----------------------------------------------------------
单行注释 ‘//’
多行注释 ‘/* */’
----------------------------------------------------------
声明变量 var
现在应该是用 let了
----------------------------------------------------------
分号分号~~~
----------------------------------------------------------
当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值undefined。
当你对一个值为undefined的变量进行运算操作的时候，算出来的结果将会是NaN，NaN的意思是"Not a Number"。
当你用一个值是undefined的变量来做字符串拼接操作的时候，它会输出字符串"undefined"。
----------------------------------------------------------
使用驼峰命名法来书写一个 Javascript 变量，在驼峰命名法中，变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写。
----------------------------------------------------------
+=运算符。
var myVar = 1;
myVar += 5;
console.log(myVar); // 返回 6
----------------------------------------------------------
与+=操作符类似，-=操作符用来对一个变量进行减法赋值操作
----------------------------------------------------------
*=
----------------------------------------------------------
/=
----------------------------------------------------------
字符串是用单引号或双引号包裹起来的一连串的零个或多个字符。
----------------------------------------------------------
通过在引号前面使用反斜杠（\）来转义
----------------------------------------------------------
当你需要在一个字符串中使用多个引号的时候，你可以使用单引号包裹双引号或者相反。
常见的场景比如在字符串中包含对话的句子需要用引号包裹。
另外比如在一个包含有<a>标签的字符串中，<a>标签的属性值需要用引号包裹。
----------------------------------------------------------
代码	输出
\'	单引号
\"	双引号
\\	反斜杠
\n	换行符
\r	回车符
\t	制表符
\b	退格
\f	换页符
----------------------------------------------------------
当对一个String类型的值使用+操作符的时候，它被称作 concatenation 操作符。
你可以通过和其他字符串concatenation来创建一个新的字符串。
----------------------------------------------------------
使用+=运算符来concatenate（拼接）字符串到现有字符串的结尾
----------------------------------------------------------
.length来获得字符串变量字符串值的长度
----------------------------------------------------------
无法只改变string中的一个字符，可以重新给string赋值
----------------------------------------------------------
要获取字符串的最后一个字符，可以用字符串的长度减 1 的索引值
firstName[firstName.length - 1]来得到字符串的最后的一个字符。
----------------------------------------------------------
数组，以左方括号[开始定义一个数组，以右方括号]结束，里面每个元素之间用逗号隔开，例如：
var sandwich = ["peanut butter", "jelly", "bread"]
----------------------------------------------------------
[["Bulls", 23], ["White Sox", 45]]。这被称为一个多维数组。
----------------------------------------------------------
我们可以像操作字符串一样通过数组索引[index]来访问数组中的数据
----------------------------------------------------------
与字符串的数据不可变不同，数组的数据是可变的，并且可以自由地改变。
----------------------------------------------------------
一个简单的方法将数据添加到一个数组的末尾是通过push()函数。
.push()接受把一个或多个参数，并把它“推”入到数组的末尾。
----------------------------------------------------------
改变数组中数据的另一种方法是用.pop()函数。
.pop()函数用来“抛出”一个数组末尾的值。我们可以把这个“抛出”的值赋给一个变量存储起来。
换句话说就是.pop()函数移除数组末尾的元素并返回这个元素。
----------------------------------------------------------
.shift()移除的是第一个元素。
----------------------------------------------------------
.unshift()函数用起来就像.push()函数一样, 但不是在数组的末尾添加元素，而是在数组的头部添加元素。
----------------------------------------------------------
函数。
function functionName() {
  console.log("Hello World");
}
----------------------------------------------------------
函数的参数parameters在函数中充当占位符(也叫形参)的作用，参数可以为一个或多个。
调用一个函数时所传入的参数为实参，实参决定着形参真正的值。简单理解：形参即形式、实参即内容。
----------------------------------------------------------
在 JavaScript 中，作用域涉及到变量的作用范围。在函数外定义的变量具有 全局 作用域。
这意味着，具有全局作用域的变量可以在代码的任何地方被调用。
这些没有使用var/let关键字定义的变量，会被自动创建在全局作用域中，形成全局变量。
当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。
因此你应该总是使用var/let关键字来声明你的变量。
----------------------------------------------------------
一个程序中有可能具有相同名称的局部变量 和全局变量。在这种情况下，局部变量将会优先于全局变量。
----------------------------------------------------------
我们可以通过函数的参数把值传入函数，也可以使用return语句把数据从一个函数中传出来
----------------------------------------------------------
函数一般用return语句来返回值，但这不是必须的。
在函数没有return语句的情况下，当你调用它时，该函数会执行内部代码，返回的值是undefined。
----------------------------------------------------------
一个函数的返回值，赋值给一个变量
----------------------------------------------------------
if(条件为真){
语句被执行
}
----------------------------------------------------------
在 JavaScript 中，为了让两个不同的数据类型（例如数字和字符串）的值可以作比较，
它必须把一种类型转换为另一种类型。
然而一旦这样做，它可以像下面这样来比较：
1 == 1 // true
1 == 2 // false
1 == '1' // true
"3" == 3 // true
----------------------------------------------------------
严格相等运算符（===）是相对相等操作符（==）的另一种比较操作符。
相等操作符不同的是，它会同时比较元素的值和数据类型。
----------------------------------------------------------
不相等运算符（!=）, 不相等运算符在比较的时候也会转换值的数据类型。
----------------------------------------------------------
严格不相等运算符（!==）
----------------------------------------------------------
大于运算符（>）, 与相等运算符一样，大于运算符在比较的时候，会转换值的数据类型。
----------------------------------------------------------
大于等于运算符（>=）, 大于等于运算符在比较的时候会转换值的数据类型
----------------------------------------------------------
<, <=
----------------------------------------------------------
逻辑运算符 &&, ||
----------------------------------------------------------
if, else, else if
if (num > 15) {
return "Bigger than 15";
} else if (num < 5) {
return "Smaller than 5";
} else {
return "Between 5 and 15";
}
----------------------------------------------------------
在条件判断语句中，代码的执行顺序是从上到下，所以你需要考虑清楚先执行哪一句，后执行哪一句
function foo(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}

function bar(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}
这两个函数看起来几乎一模一样，传一个值进去看看它们有什么区别。
foo(0) // "Less than one"
bar(0) // "Less than two"
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------








