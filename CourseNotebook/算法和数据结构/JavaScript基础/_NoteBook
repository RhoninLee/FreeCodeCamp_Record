----------------------------------------------------------
单行注释 ‘//’
多行注释 ‘/* */’
----------------------------------------------------------
声明变量 var
现在应该是用 let了
----------------------------------------------------------
分号分号~~~
----------------------------------------------------------
当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值undefined。
当你对一个值为undefined的变量进行运算操作的时候，算出来的结果将会是NaN，NaN的意思是"Not a Number"。
当你用一个值是undefined的变量来做字符串拼接操作的时候，它会输出字符串"undefined"。
----------------------------------------------------------
使用驼峰命名法来书写一个 Javascript 变量，在驼峰命名法中，变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写。
----------------------------------------------------------
+=运算符。
var myVar = 1;
myVar += 5;
console.log(myVar); // 返回 6
----------------------------------------------------------
与+=操作符类似，-=操作符用来对一个变量进行减法赋值操作
----------------------------------------------------------
*=
----------------------------------------------------------
/=
----------------------------------------------------------
字符串是用单引号或双引号包裹起来的一连串的零个或多个字符。
----------------------------------------------------------
通过在引号前面使用反斜杠（\）来转义
----------------------------------------------------------
当你需要在一个字符串中使用多个引号的时候，你可以使用单引号包裹双引号或者相反。
常见的场景比如在字符串中包含对话的句子需要用引号包裹。
另外比如在一个包含有<a>标签的字符串中，<a>标签的属性值需要用引号包裹。
----------------------------------------------------------
代码	输出
\'	单引号
\"	双引号
\\	反斜杠
\n	换行符
\r	回车符
\t	制表符
\b	退格
\f	换页符
----------------------------------------------------------
当对一个String类型的值使用+操作符的时候，它被称作 concatenation 操作符。
你可以通过和其他字符串concatenation来创建一个新的字符串。
----------------------------------------------------------
使用+=运算符来concatenate（拼接）字符串到现有字符串的结尾
----------------------------------------------------------
.length来获得字符串变量字符串值的长度
----------------------------------------------------------
无法只改变string中的一个字符，可以重新给string赋值
----------------------------------------------------------
要获取字符串的最后一个字符，可以用字符串的长度减 1 的索引值
firstName[firstName.length - 1]来得到字符串的最后的一个字符。
----------------------------------------------------------

----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------










